<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on 杏仁儿的博客</title><link>https://xinrea.cn/posts/</link><description>Recent content in Posts on 杏仁儿的博客</description><generator>Hugo -- 0.134.1</generator><language>zh-CN</language><lastBuildDate>Fri, 06 Sep 2024 18:01:17 +0800</lastBuildDate><atom:link href="https://xinrea.cn/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Cursor IDE 的简单体验</title><link>https://xinrea.cn/posts/cursor-ide-experience/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><guid>https://xinrea.cn/posts/cursor-ide-experience/</guid><description>&lt;p>在最近刷到了挺多推销 Cursor IDE 的视频和文章，大多都将其效果描述得十分夸张。然而自己是 GitHub Copilot 内测时期就开始使用的用户了，因此很想将两者进行对比。在此记录一下对于 Cursor IDE 的简单体验。&lt;/p></description></item><item><title>GetSaveFileName 引发的工作目录变更</title><link>https://xinrea.cn/posts/getsavefilename/</link><pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate><guid>https://xinrea.cn/posts/getsavefilename/</guid><description>&lt;p>近日在处理 C++ Win32 程序异常时，采用 &lt;a href="https://learn.microsoft.com/en-us/windows/win32/debug/minidump-files">Minidump&lt;/a> 来保存程序崩溃时的栈记录，生成的 dmp 文件保存在配置数据目录下。
如果程序启动时检查发现存在 dmp 文件，则弹出提示框让用户选择路径来保存该文件，主要逻辑如下所示：&lt;/p></description></item><item><title>从新硬盘检测到硬盘接口的发展</title><link>https://xinrea.cn/posts/from-disk-detect-to-development-of-interface/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate><guid>https://xinrea.cn/posts/from-disk-detect-to-development-of-interface/</guid><description>&lt;p>在工作中经常需要为虚拟机新增磁盘设备，为了在不 reboot 的情况下使用这些新磁盘，需要对新磁盘进行检测。而检测的方法是如下命令（方法来自 &lt;a href="https://unix.stackexchange.com/questions/404405/how-to-detect-new-hard-disk-attached-without-rebooting">Stack Exchange&lt;/a>）：&lt;/p></description></item><item><title>为 Go 添加三目运算符</title><link>https://xinrea.cn/posts/ternary-in-go/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://xinrea.cn/posts/ternary-in-go/</guid><description>&lt;p>最近在用 Go 刷算法题的过程中，切实体验到了三目运算缺失的痛苦。正好之前在探讨 Go 中 init 的处理时，了解了一些 Go 编译器的具体工作流程，因此有能力在其基础上进行修改了，于是便想着为 Go 添加三目运算。&lt;/p></description></item><item><title>分布式系统设计思路总览</title><link>https://xinrea.cn/posts/distribute-system-design/</link><pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate><guid>https://xinrea.cn/posts/distribute-system-design/</guid><description>&lt;h2 id="cap-定理">CAP 定理&lt;/h2>
&lt;p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。&lt;/p></description></item><item><title>从 init 函数的顺序问题到 Go 编译器</title><link>https://xinrea.cn/posts/go-init/</link><pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate><guid>https://xinrea.cn/posts/go-init/</guid><description>&lt;blockquote>
&lt;p>本文中引用的源码均标注了 Golang 源码仓库链接，branch 为 &lt;code>release-branch.go1.21&lt;/code>（本文在编写时 Go 1.21 还未正式发布，正式版可能会有少量变化）。&lt;/p></description></item><item><title>Qt OpenglWindow 异形窗口的实现</title><link>https://xinrea.cn/posts/qt-opengl-semi-window/</link><pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><guid>https://xinrea.cn/posts/qt-opengl-semi-window/</guid><description>&lt;p>在学习熟悉 CubismSDK 的时候，曾给轴伊Joi制作过一个简单的 Live2D 桌面宠物；由于是在官方样例的基础上进行的修改，因此程序主题通过 glew + glfw 来进行实现。由于桌面宠物的特殊性（需要尽可能减少对桌面操作的影响），可以说是必须实现异形窗口。这个异形窗口与一般的需求还不太一样：通常异形窗口是静态的，仅以一张图片作为底图，有很多种方法可以实现，其中一种便是用蒙版（Mask）来实现，但这种方式在桌面宠物这种场景下显得有点尴尬。&lt;/p></description></item><item><title>一个 gRPC 的连接问题</title><link>https://xinrea.cn/posts/about-grpc-connection/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>https://xinrea.cn/posts/about-grpc-connection/</guid><description>&lt;p>最近在开发的项目用到了 gRPC，并且要求使用证书进行双向认证。于是便生成了一个 CA 证书，并以此签名生成了服务端和客户端所需的各种证书，且在周五进行客户端服务端连接测试时一切正常。周末两天过去了，周一再进行测试时，连接出现了如下错误:&lt;/p></description></item></channel></rss>